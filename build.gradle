buildscript {
  ext.kotlin_version = '1.4.20'

  if ("$gradle.gradleVersion" != "6.7") {
    throw new GradleException("Gradle version 6.7 is required (received $gradle.gradleVersion)")
  }

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:4.1.2"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "digital.wup:android-maven-publish:3.6.3"
    classpath "com.vanniktech:gradle-android-junit-jacoco-plugin:0.16.0"
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.3.0"
  }
}

plugins {
  id "ru.vyarus.animalsniffer" version "1.5.0"
  id "io.codearte.nexus-staging" version "0.20.0"
  id "com.vanniktech.android.junit.jacoco" version "0.13.0"
  id "digital.wup.android-maven-publish" version "3.6.2"
}

ext {
  androidCompileSDKVersion = 28
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion = 28

  if (!project.hasProperty("mavenCentralUsername")) {
    logger.warn("No mavenCentralUsername property specified: Using an empty value")
    mavenCentralUsername = ""
  }
  if (!project.hasProperty("mavenCentralPassword")) {
    logger.warn("No mavenCentralPassword property specified: Using an empty value")
    mavenCentralPassword = ""
  }

  if (!project.hasProperty("org.librarysimplified.nexus.depend")) {
    logger.warn("org.librarysimplified.nexus.depend is not set: We will not depend on artifacts on the NYPL Nexus")
    useNYPLNexusDepend = false
  } else {
    logger.warn("org.librarysimplified.nexus.depend is set: We will depend on artifacts on the NYPL Nexus")
    useNYPLNexusDepend = true
  }

  if (project.hasProperty("org.librarysimplified.directory.publish")) {
    useDirectoryPublishPath = project.property("org.librarysimplified.directory.publish")
    useDirectoryPublish = true
    logger.warn("org.librarysimplified.directory.publish is set: We will publish artifacts to ${useDirectoryPublishPath}")
  } else {
    logger.warn("org.librarysimplified.directory.publish is not set: We will not publish artifacts to a custom directory")
    useDirectoryPublish = false
    useDirectoryPublishPath = null
  }

  if (project.hasProperty("org.librarysimplified.no_signing")) {
    disableSigning = true
    logger.warn("org.librarysimplified.no_signing is set: We will not sign artifacts")
  } else {
    disableSigning = false
    logger.warn("org.librarysimplified.no_signing is not set: We will attempt to sign artifacts")
  }
}

ext.versions = [
  androidx_core_ktx: "1.3.1",
  junit            : "4.13-beta-3",
  junreachable     : "1.0.2",
  r2_shared        : "29422a6e",
  slf4j            : "1.7.25",
  nypl_http        : '0.0.21',
]

ext.libraries = [
  androidx_core_ktx: "androidx.core:core-ktx:${versions.androidx_core_ktx}",
  junit            : "junit:junit:${versions.junit}",
  junreachable     : "com.io7m.junreachable:io7m-junreachable-core:${versions.junreachable}",
  kotlin_stdlib    : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
  r2_shared        : "com.github.readium:r2-shared-kotlin:${versions.r2_shared}",
  slf4j            : "org.slf4j:slf4j-api:${versions.slf4j}",
  nypl_http_api    : "org.librarysimplified.http:org.librarysimplified.http.api:${versions.nypl_http}",
]

apply plugin: "com.vanniktech.android.junit.jacoco"

allprojects {
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]

  repositories {
    maven { url "https://jitpack.io" }
  }
}

subprojects { project ->

  switch (POM_PACKAGING) {
    case "jar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as jar project")

      apply plugin: "java"
      apply plugin: "java-library"
      apply plugin: "kotlin"

      /*
       * Apply the Animal Sniffer plugin to check that code is Android compatible.
       */

      apply plugin: "ru.vyarus.animalsniffer"

      dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"
        signature "net.sf.androidscents.signature:android-api-level-14:4.0_r4@signature"
      }

      /*
       * Build an OSGi bundle.
       */

      apply plugin: "biz.aQute.bnd.builder"

      jar {
        bnd """
Automatic-Module-Name: ${POM_AUTOMATIC_MODULE_NAME}

-removeheaders: Bnd-LastModified, Tool, Private-Package
"""
      }
      break

    case "apk":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android application project")

      apply plugin: "com.android.application"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
      }
      break

    case "aar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android library project")

      apply plugin: "com.android.library"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        testOptions {
          execution "ANDROID_TEST_ORCHESTRATOR"
          animationsDisabled = true
        }
      }
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  task javadocsJar(type: Jar) {
    classifier = "javadoc"
  }

  task sourcesJar(type: Jar) {
    classifier = "sources"
    from "src/main/java", "src/main/resources"
  }

  apply plugin: "digital.wup.android-maven-publish"

  publishing {
    publications {
      basicJar(MavenPublication) {

        switch (POM_PACKAGING) {
          case "jar":
            from components.java
            break

          case "apk":
            break

          case "aar":
            from components.android
            break
        }

        artifact sourcesJar
        artifact javadocsJar

        pom {
          artifactId = POM_ARTIFACT_ID
          name = POM_NAME
          packaging = POM_PACKAGING
          description = POM_DESCRIPTION
          url = POM_URL

          scm {
            connection = POM_SCM_CONNECTION
            developerConnection = POM_SCM_DEV_CONNECTION
            url = POM_SCM_URL
          }

          licenses {
            license {
              name = POM_LICENCE_NAME
              url = POM_LICENCE_URL
            }
          }

          developers {
            developer {
              id = POM_DEVELOPER_ID
              name = POM_DEVELOPER_NAME
              email = POM_DEVELOPER_EMAIL
              url = POM_DEVELOPER_URL
            }
          }
        }
      }
    }

    repositories {
      if (useDirectoryPublish) {
        logger.info("using ${useDirectoryPublishPath} for publication")

        maven {
          name = "Directory"
          url = "file://${useDirectoryPublishPath}"
        }
      }

      if (version.endsWith("-SNAPSHOT")) {
        maven {
          url = "https://oss.sonatype.org/content/repositories/snapshots/"
          name = "SonatypeSnapshots"
          credentials(PasswordCredentials) {
            username mavenCentralUsername
            password mavenCentralPassword
          }
        }
      }
    }
  }

  if (!disableSigning) {
    apply plugin: "signing"

    signing {
      useGpgCmd()
      sign publishing.publications.basicJar
    }
  }

  repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    google()
  }
}

/**
 * Empty tasks called by CI. We don't do this kind of analysis here yet.
 */

task verifySemanticVersioning {

}

task ktlint {

}
